/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

struct Fibonacci {
  curr: u64,
  next: u64,
}

impl Iterator for Fibonacci {
  type Item = u64;
  fn next(&mut self) -> Option<u64> {
    let new_next = self.curr + self.next;
    self.curr = self.next;
    self.next = new_next;

    return Some(self.curr);
  }
}

fn main() {
  let mut sum:u64 = 0;
  let mut fib = Fibonacci{curr: 1, next: 1};
  let mut i = 0; //fib.next();

  while i <= 4_000_000 {
    match fib.next() {
      Some(x) => i = x,
      None => () 
    }
    println!("{:?}", i);
    if i % 2 == 0 {sum += i}
  }
  println!("={:?}", sum);
}